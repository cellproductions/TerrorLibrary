TODO:

ButtonToggle:


Container:
* Container needs all mouse input components added
* fix widths to account for scroll bar (or horizontal scrolling?)
* Make a ContainerGen class that inherits Container, Container stores images, ContainerGen stores images and generic objects
* fill out scroll functions + sort function


Label:


LabelExtended:
* needs to be finished
* LabelExtended needs all mouse input components added


Slider:
* Slider needs all mouse input components added


ListBox:
* ListBox's need to fix the length of text if it goes outside the width of the list box


ListBoxGen:
* should be its own superclass (shouldnt inherit from ListBox)
	* as a result, ListBoxDropGen should inherit from this component


ListBoxDrop:
* Click anywhere on a closed ListBoxDrop to open it
* keep the arrow draw upon dropping, allow clicking on it to close again
* should be able to edit the size of the undropped box


TextBox:
* text box's should allow typing sentences outside of the box area
* if there is enough vertical space, allow multiple lines of text to be typed
* upon tab key being pressed, set next textbox in set (from parent) to the active one (or in the next set if there are no more textbox's in the current set)


GUIComponents:
* all input first needs to check if the component is enabled (direct input, meaning mouse click or key press)
* set change variables where appropriate
* upon being de-enabled, GUIControls should draw grey, transparent filter over their graphics
* every GUIControl needs alpha variable (upon being changed, set changed to true and set all appropriate Images to that alpha)
* split every GUIControl's checks to draw the graphic (check alpha first, then check visibility)
* make numItems in any GUIControl private and give it a getter function
* instead of using new Color(), create pre made colors in GUIManager
* add constant for font height to be used in all GUIControls
* should not draw outside of the size of the parent GUI
* remove the GUILoop function, its is basically the same as the game loop, not needed
* all components that implement scrollable, change mouseButtonDown(0) part to mousePressed(), set a boolean to false upon mouseReleased() to stop scrolling 
* make updateC() protected and all inherited classes use it instead of their own
* remove 'priority' method from all base/subclasses
* make sure that most collection implementing components have synchronized functions in regards to editing their container types (or iterating over them)
* only allow clicking on a single component, e.g. multiple overlapping components will receive the same mouse click, etc, must be stopped


GUI:
* delete? obsolete?


* Cursor needs to have a setPointerPosition(int x, int y) that sets, on its image, a spot where it gets its x and y positions from
* implement debugging for all GUI/GUIControls (draws a yellow rectangle around them, 0, 0, width - 1, height - 1)
* check exception handling throughout gui stuff
* make sure that all GUI and GUIControls can handle using an image
* create Interfaces that describe different functions for GUIComponents
* create TGUIOutOfBoundsException that prints the error along with the id and possible range (and the value that was wrong), example in TGUIComponent
	* replace all exceptions amongst all guis with this one
* add a static distance method to TPoint

BUGS:
* sliders dont set the slider at the right position from the constructor
* sliders dont 'slide' anymore, they must slide :P
* clicking on an Item in a ListBox gets gradually more offset for some reason (same in other collection implemented subclasses)
* ListBox numDown is 1 off when using scrollDown/Up compared to normal click scrolling (perhaps make click scroll use scrollDown/Up functions)
* label word wrapping sometimes adds a space to the list lines, also inf-loops when [[ involved